# Name: Osama Shaikh
# Date: 3/2/2020
# Student Number: 100574967
# Description: The program will ask you to put a plain text after putting that text it will encrypt that text for you into a random encryption.
# "I Osama Shaikh (100574967) and Umer Mohiuddin (100701974) have not given, received, or used any unauthorized assistance."
import random
import sys
import math
import string
class color:
   PURPLE = '\033[95m'
   CYAN = '\033[96m'
   DARKCYAN = '\033[36m'
   BLUE = '\033[94m'
   GREEN = '\033[92m'
   YELLOW = '\033[93m'
   RED = '\033[91m'
   BOLD = '\033[1m'
   UNDERLINE = '\033[4m'
   END = '\033[0m'

hello=("""




                 ███████╗███████╗ ██████╗██████╗ ███████╗████████╗     ██████╗ ██████╗ ██████╗ ███████╗███████╗
                 ██╔════╝██╔════╝██╔════╝██╔══██╗██╔════╝╚══██╔══╝    ██╔════╝██╔═══██╗██╔══██╗██╔════╝██╔════╝
                 ███████╗█████╗  ██║     ██████╔╝█████╗     ██║       ██║     ██║   ██║██║  ██║█████╗  ███████╗
                 ╚════██║██╔══╝  ██║     ██╔══██╗██╔══╝     ██║       ██║     ██║   ██║██║  ██║██╔══╝  ╚════██║
                 ███████║███████╗╚██████╗██║  ██║███████╗   ██║       ╚██████╗╚██████╔╝██████╔╝███████╗███████║
                 ╚══════╝╚══════╝ ╚═════╝╚═╝  ╚═╝╚══════╝   ╚═╝        ╚═════╝ ╚═════╝ ╚═════╝ ╚══════╝╚══════╝
                                                                                              
   """)
print(color.RED + hello + color.END)
str2="""
                                                                                                

                                                                                                                        Created by : Osama Shaikh (100574967)
                                                                                                                        and Umer Mohiuddin (100701974) 
                                                                                                                        Date: 3/5/2020

"""
print(color.BOLD + str2 + color.END)

import random
import sys
import math

from random import randrange

def rabinMiller(n, k=10):
    if n == 2:
            return True
    if not n & 1:
            return False

    def check(a, s, d, n):
            x = pow(a, d, n)
            if x == 1:
                    return True
            for i in range(1, s - 1):
                    if x == n - 1:
                            return True
                    x = pow(x, 2, n)
            return x == n - 1

    s = 0
    d = n - 1

    while d % 2 == 0:
            d >>= 1
            s += 1

    for i in range(1, k):
            a = randrange(2, n - 1)
            if not check(a, s, d, n):
                    return False
    return True

def isPrime(n):
     #lowPrimes is all primes (sans 2, which is covered by the bitwise and operator)
     #under 1000. taking n modulo each lowPrime allows us to remove a huge chunk
     #of composite numbers from our potential pool without resorting to Rabin-Miller
     lowPrimes =   [3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97
                   ,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179
                   ,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269
                   ,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367
                   ,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461
                   ,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571
                   ,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661
                   ,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773
                   ,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883
                   ,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]
     if (n >= 3):
         if (n&1 != 0):
             for p in lowPrimes:
                 if (n == p):
                    return True
                 if (n % p == 0):
                     return False
             return rabinMiller(n)
     return False

def generateLargePrime(k):
     #k is the desired bit length
     r = 100*(math.log(k,2)+1) #number of attempts max
     r_ = r
     while r>0:
        #randrange is mersenne twister and is completely deterministic
        #unusable for serious crypto purposes
         n = random.randrange(2**(k-1),2**(k))
         r -= 1
         if isPrime(n) == True:
             return n

     str_failure = "Failure after" + str(r_) + "tries."
     return str_failure


def gcd(a, b):
    '''
    Euclid's algorithm for determining the greatest common divisor
    Use iteration to make it faster for larger integers
    '''
    while b != 0:
        a, b = b, a % b
    return a

def multiplicative_inverse(a, b):
    """Returns a tuple (r, i, j) such that r = gcd(a, b) = ia + jb
    """
    # r = gcd(a,b) i = multiplicitive inverse of a mod b
    #      or      j = multiplicitive inverse of b mod a
    # Neg return values for i or j are made positive mod b or a respectively
    # Iterateive Version is faster and uses much less stack space
    x = 0
    y = 1
    lx = 1
    ly = 0
    oa = a  # Remember original a/b to remove
    ob = b  # negative values from return results
    while b != 0:
        q = a // b
        (a, b) = (b, a % b)
        (x, lx) = ((lx - (q * x)), x)
        (y, ly) = ((ly - (q * y)), y)
    if lx < 0:
        lx += ob  # If neg wrap modulo orignal b
    if ly < 0:
        ly += oa  # If neg wrap modulo orignal a
    # return a , lx, ly  # Return only positive values
    return lx

def multiply(x, y):
    _CUTOFF = 1536
    if x.bit_length() <= _CUTOFF or y.bit_length() <= _CUTOFF:  # Base case
        return x * y
    else:
        n = max(x.bit_length(), y.bit_length())
        half = (n + 32) // 64 * 32
        mask = (1 << half) - 1
        xlow = x & mask
        ylow = y & mask
        xhigh = x >> half
        yhigh = y >> half

        a = multiply(xhigh, yhigh)
        b = multiply(xlow + xhigh, ylow + yhigh)
        c = multiply(xlow, ylow)
        d = b - a - c
        return (((a << half) + d) << half) + c


def generate_keypair(keySize=10):
    p = generateLargePrime(keySize)
    print(p)
    q = generateLargePrime(keySize)
    print(q)

    if p == q:

        raise ValueError('p and q cannot be equal')

    #n = pq
    n = multiply(p, q)

    #Phi is the totient of n
    phi = multiply((p-1),(q-1))

    #Choose an integer e such that e and phi(n) are coprime
    e = random.randrange(1, phi)

    #Use Euclid's Algorithm to verify that e and phi(n) are comprime
    g = gcd(e, phi)

    while g != 1:
        e = random.randrange(1, phi)
        g = gcd(e, phi)

    #Use Extended Euclid's Algorithm to generate the private key
    d = multiplicative_inverse(e, phi)

    #Return public and private keypair
    #Public key is (e, n) and private key is (d, n)
    return ((e, n), (d, n))
class Message:
    def __init__(self, plaintextmsg):
        self.plaintextmsg = plaintextmsg
    def encrypt_Substition_cipher(self):
        pass
    def decrypt_Substition_cipher(self):
        pass
    def decrypt_Playfair_cipher(self):
        pass
    def decrypt_Caesar_cipher(self):
        pass
    def decrypt_Transposition(self):
        pass
    def decrypt_Product_cipher(self):
        pass
    def decrypt_RSA(self,a,b):
        pass
    def encrypt_Playfair_cipher(self):
        pass
    def encrypt_Caesar_cipher(self):
        pass
    def encrypt_Transposition(self):
        pass
    def encrypt_Product_cipher(self):
        pass
    def encrypt_RSA(self,a,b):
        pass
class plaintextMsg(Message):
    def __init__(self,message):
        super().__init__(message)
    def encrypt_Substition_cipher(self):
        all_letters = string.ascii_letters
        dict1 = {}
        key = 5
        for i in range(len(all_letters)):
            dict1[all_letters[i]] = all_letters[(i + key) % len(all_letters)]
        plain_txt = self.plaintextmsg
        cipher_txt = []
        for char in plain_txt:
            if char in all_letters:
                temp = dict1[char]
                cipher_txt.append(temp)
            else:
                temp = char
                cipher_txt.append(temp)
        cipher_txt = "".join(cipher_txt)
        return cipher_txt
    def encrypt_Playfair_cipher(self):
        key = "ok"
        message = self.plaintextmsg
        def matrix(key):
            matrix = []
            for e in key.upper():
                if e not in matrix:
                    matrix.append(e)
            alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
            for e in alphabet:
                if e not in matrix:
                    matrix.append(e)
            matrix_group = []
            for e in range(5):
                matrix_group.append('')
            matrix_group[0] = matrix[0:5]
            matrix_group[1] = matrix[5:10]
            matrix_group[2] = matrix[10:15]
            matrix_group[3] = matrix[15:20]
            matrix_group[4] = matrix[20:25]
            return matrix_group
        def message_to_digraphs(message_original):
            message = []
            for e in message_original:
                message.append(e)
            for unused in range(len(message)):
                if " " in message:
                    message.remove(" ")
            i = 0
            for e in range(int(len(message) / 2)):
                if message[i] == message[i + 1]:
                    message.insert(i + 1, 'X')
                i = i + 2
            if len(message) % 2 == 1:
                message.append("X")
            i = 0
            new = []
            for x in range(1, int(len(message) / 2 + 1)):
                new.append(message[i:i + 2])
                i = i + 2
            return new
        def find_position(key_matrix, letter):
            x = y = 0
            for i in range(5):
                for j in range(5):
                    if key_matrix[i][j] == letter:
                        x = i
                        y = j
            return x, y
        message = message_to_digraphs(message)
        key_matrix = matrix(key)
        cipher = []
        for e in message:
            p1, q1 = find_position(key_matrix, e[0])
            p2, q2 = find_position(key_matrix, e[1])
            if p1 == p2:
                if q1 == 4:
                    q1 = -1
                if q2 == 4:
                    q2 = -1
                cipher.append(key_matrix[p1][q1 + 1])
                cipher.append(key_matrix[p1][q2 + 1])
            elif q1 == q2:
                if p1 == 4:
                    p1 = -1
                if p2 == 4:
                    p2 = -1
                cipher.append(key_matrix[p1 + 1][q1])
                cipher.append(key_matrix[p2 + 1][q2])
            else:
                cipher.append(key_matrix[p1][q2])
                cipher.append(key_matrix[p2][q1])
        return cipher
    def encrypt_Caesar_cipher(self):
        string = self.plaintextmsg
        shift = 5
        cipher = ''
        for char in string:
            if char == ' ':
                cipher = cipher + char
            elif char.isupper():
                cipher = cipher + chr((ord(char) + shift - 65) % 26 + 65)
            else:
                cipher = cipher + chr((ord(char) + shift - 97) % 26 + 97)
        return cipher
    def encrypt_Transposition(self):
        key = "Hack"
        msg = self.plaintextmsg
        cipher = ""
        k_indx = 0
        msg_len = float(len(msg))
        msg_lst = list(msg)
        key_lst = sorted(list(key))
        col = len(key)
        row = int(math.ceil(msg_len / col))
        fill_null = int((row * col) - msg_len)
        msg_lst.extend('_' * fill_null)
        matrix = [msg_lst[i: i + col]
                  for i in range(0, len(msg_lst), col)]
        for _ in range(col):
            curr_idx = key.index(key_lst[k_indx])
            cipher += ''.join([row[curr_idx]
                               for row in matrix])
            k_indx += 1
        return cipher
    def encrypt_Product_cipher(self):
        def encrypt(text, s):
            result = ""
            for i in range(len(text)):
                char = text[i]
                if (char.isupper()):
                     result += char((ord(char) + s - 65) % 26 + 65)
                else:
                     result += chr((ord(char) + s - 97) % 26 + 97)
                return result
            text = self.plaintextmsg
            s = 5
            print("Text : " + text)
            print("Shift : " + str(s))
            print("Cipher: " + encrypt(text, s))
        y = encrypt(self.plaintextmsg,5)
        return y
    def encrypt_RSA(self, pk, cipertext):
        # Unpack the key into it's components
        key, n = pk
        # Convert each letter in the plaintext to numbers based on the character using a^b mod m
        cipher = [(ord(char) ** key) % n for char in self.plaintextmsg]
        # Return the array of bytes
        return cipher
class ciphertextMsg(Message):
    def __init__(self,message):
        super().__init__(message)
    def decrypt_Substition_cipher(self):
        all_letters = string.ascii_letters
        cipher_txt = []
        key = 4
        dict2 = {}
        for i in range(len(all_letters)):
            dict2[all_letters[i]] = all_letters[(i - key) % (len(all_letters))]
        decrypt_txt = []
        for char in cipher_txt:
            if char in all_letters:
                temp = dict2[char]
                decrypt_txt.append(temp)
            else:
                temp = char
                decrypt_txt.append(temp)
        decrypt_txt = "".join(decrypt_txt)
        print("Recovered plain text :", decrypt_txt)
    def decrypt_Playfair_cipher(self):
        key = "Hack"

        def matrix(key):
            matrix = []
            for e in key.upper():
                if e not in matrix:
                    matrix.append(e)
            alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"

            for e in alphabet:
                if e not in matrix:
                    matrix.append(e)

            # initialize a new list. Is there any elegant way to do that?
            matrix_group = []
            for e in range(5):
                matrix_group.append('')

            # Break it into 5*5
            matrix_group[0] = matrix[0:5]
            matrix_group[1] = matrix[5:10]
            matrix_group[2] = matrix[10:15]
            matrix_group[3] = matrix[15:20]
            matrix_group[4] = matrix[20:25]
            return matrix_group

        def find_position(key_matrix, letter):
            x = y = 0
            for i in range(5):
                for j in range(5):
                    if key_matrix[i][j] == letter:
                        x = i
                        y = j
            return x, y

        def cipher_to_digraphs(cipher):
            i = 0
            new = []
            for x in range(int(len(cipher) / 2)):
                new.append(cipher[i:i + 2])
                i = i + 2
            return new

        def decrypt(cipher):
            cipher = cipher_to_digraphs(cipher)
            key_matrix = matrix(key)
            plaintext = []
            for e in cipher:
                p1, q1 = find_position(key_matrix, e[0])
                p2, q2 = find_position(key_matrix, e[1])
                if p1 == p2:
                    if q1 == 4:
                        q1 = -1
                    if q2 == 4:
                        q2 = -1
                    plaintext.append(key_matrix[p1][q1 - 1])
                    plaintext.append(key_matrix[p1][q2 - 1])
                elif q1 == q2:
                    if p1 == 4:
                        p1 = -1
                    if p2 == 4:
                        p2 = -1
                    plaintext.append(key_matrix[p1 - 1][q1])
                    plaintext.append(key_matrix[p2 - 1][q2])
                else:
                    plaintext.append(key_matrix[p1][q2])
                    plaintext.append(key_matrix[p2][q1])

            for unused in range(len(plaintext)):
                if "X" in plaintext:
                    plaintext.remove("X")

            output = ""
            for e in plaintext:
                output += e
            return output.lower()

    # key="cipher"
    # message="effecttreecorrectapple"
    # cipher="FNNFHOODPZCIVGFCHOBIBSPZ"

    # key="playfairexample"
    # message="Hide the gold in the tree stump"
    # >>BMODZBXDNABEKUDMUIXMMOUVIF
    def decrypt_Caesar_cipher(self):
        import string
        from time import sleep

        alphabet = string.ascii_lowercase  # "abcdefghijklmnopqrstuvwxyz"

        def decrypt():

            print("Welcome to Caesar Cipher Decryption.\n")
            encrypted_message = input("Enter the message you would like to decrypt: ").strip()
            print()
            key = int(input("Enter key to decrypt: "))

            decrypted_message = ""

            for c in encrypted_message:

                if c in alphabet:
                    position = alphabet.find(c)
                    new_position = (position - key) % 26
                    new_character = alphabet[new_position]
                    decrypted_message += new_character
                else:
                    decrypted_message += c

            print("\nDecrypting your message...\n")
            sleep(2)  # give an appearance of doing something complicated
            print("Stand by, almost finished...\n")
            sleep(2)  # more of the same
            print("Your decrypted message is:\n")
            print(decrypted_message)

        decrypt()
    def decrypt_Transposition(self):
        def decryptMessage(cipher):
            key = "Hacks"
            msg = ""

            # track key indices
            k_indx = 0

            # track msg indices
            msg_indx = 0
            msg_len = float(len(cipher))
            msg_lst = list(cipher)

            # calculate column of the matrix
            col = len(key)

            # calculate maximum row of the matrix
            row = int(math.ceil(msg_len / col))

            # convert key into list and sort
            # alphabetically so we can access
            # each character by its alphabetical position.
            key_lst = sorted(list(key))

            # create an empty matrix to
            # store deciphered message
            dec_cipher = []
            for _ in range(row):
                dec_cipher += [[None] * col]

                # Arrange the matrix column wise according
            # to permutation order by adding into new matrix
            for _ in range(col):
                curr_idx = key.index(key_lst[k_indx])

                for j in range(row):
                    dec_cipher[j][curr_idx] = msg_lst[msg_indx]
                    msg_indx += 1
                k_indx += 1

            # convert decrypted msg matrix into a string
            try:
                msg = ''.join(sum(dec_cipher, []))
            except TypeError:
                raise TypeError("This program cannot",
                                "handle repeating words.")

            null_count = msg.count('_')

            if null_count > 0:
                return msg[: -null_count]

            return msg

    msg = "Geeks for Geeks"

    def decrypt_Product_cipher(self):
        def decryptMessage(Key, message):
            key = 6
            numOfColumns = math.ceil(len(message) / key)
            numOfRow = key
            numOfShadedBoxes = (numOfColumns * numOfRow) - len(message)
            plaintext = float(' ') * numOfColumns
            col = 0
            row = 0
            for symbol in message:
                plaintext[col] += symbol
                col += 1
            if (col == numOfColumns) or (col == numOfColumns - 1 and row >= numOfRow - numOfShadedBoxes):
                col = 0
                row += 1
        return ' '.join(plaintext)

    def decrypt(self,pk, ciphertext):
        # Unpack the key into its components
        key, n = pk
        # Generate the plaintext based on the ciphertext and key using a^b mod m
        plain = [chr((char ** key) % n) for char in self.plaintextmsg]
        # Return the array of bytes as a string
        return ''.join(plain)


if __name__ == '__main__':
    plaintext = []
    ciphertext = []
    algorithums = []
    firsttime = 0
    print(
        "Instruction: To play this game you need to type 'START' or 'start or press 'Enter', After that you will be asked to write plain text and to know \nwhat is encryption version of that text you simply need to type 'STOP that will show all the encrypts of your plaintexts.\nNote: The shifts are hardcoded to '5' and RSA might take a while to load so please wait for it to load.")
    join = input("")
    if join == "START" or "start":
        firsttime = 1
        while True:
             print("")
             userplaintext = input("What is your plain text?:")
             print("")
             if userplaintext == "STOP":
                 ask =input("Are you sure you want stop (Yes/No):")
                 if ask == "Yes":
                     for i in range(0, len(plaintext)):
                         print(str(plaintext[i]) + ": Word you input", "\n" + str(ciphertext[i]) + ":", str(algorithums[i]))
                         print("")
                     sys.exit("Thankyou For Playing Secret codes games.""\n""Created by Osama Shaikh and Umer Shahid")
                 if ask == "No":
                     continue
                 if ask == "":
                     print("")
                     print("You didn't said Yes/No it will continue with game.")
                     continue
# This is while true loop use it to ask input prompt and to be use for ending the game

             x = plaintextMsg(userplaintext)
             alogorithumchoice = random.randint(1,6)
             if userplaintext == "":
                 print("Error: Please put a text")
                 continue
             if alogorithumchoice == 1:
                  output = x.encrypt_Substition_cipher()
                  plaintext.append(userplaintext)
                  ciphertext.append(output)
                  algorithums.append("Encrypt Substitution")
                  print(userplaintext,":",output)
             elif alogorithumchoice == 2:
                  output = x.encrypt_Playfair_cipher()
                  plaintext.append(userplaintext)
                  ciphertext.append(output)
                  algorithums.append("Encrypt Playfair")
                  print(userplaintext,":",output)
             elif alogorithumchoice == 3:
                  output = x.encrypt_Caesar_cipher()
                  plaintext.append(userplaintext)
                  ciphertext.append(output)
                  algorithums.append("Encrypt Caesar")
                  print(userplaintext,":",output)
             elif alogorithumchoice == 4:
                  output = x.encrypt_Transposition()
                  plaintext.append(userplaintext)
                  ciphertext.append(output)
                  algorithums.append("Encrypt Transposition")
                  print(userplaintext,":",output)
             elif alogorithumchoice == 5:
                  output = x.encrypt_Product_cipher()
                  plaintext.append(userplaintext)
                  ciphertext.append(output)
                  algorithums.append("Encrypt Product")
                  print(userplaintext,":",output)
             elif alogorithumchoice == 6:
                     public, private = generate_keypair()
                     encrypted_msg = x.encrypt_RSA(private, userplaintext)
                     plaintext.append(userplaintext)
                     ciphertext.append(encrypted_msg)
                     algorithums.append("Encrypt RSA")
                     print(userplaintext,":",encrypted_msg)


# This is main function it call out all the functions.
